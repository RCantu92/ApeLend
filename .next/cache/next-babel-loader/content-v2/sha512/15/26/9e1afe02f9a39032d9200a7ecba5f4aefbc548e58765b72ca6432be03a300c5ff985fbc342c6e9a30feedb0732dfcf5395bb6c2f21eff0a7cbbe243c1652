{"ast":null,"code":"require(\"dotenv\").config({\n  path: \"./.env\"\n}); // Import Alchemy API key from nmeumonic\n\n\nconst alchemyRopsten = process.env.ALCHEMY_ROPSTEN; // const { ethers } = require(\"hardhat\");\n// May need to use this syntax for frontend:\n\nimport { ethers } from 'ethers'; // Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\n\nif (false && typeof window.web3 !== 'undefined') {\n  // A Web3Provider wraps a standard Web3 provider, which is\n  // what Metamask injects as window.ethereum into each page\n  await window.ethereum.enable();\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n} else {\n  // We are on the server *OR* the user is not running metamask\n  const network = \"ropsten\";\n  const provider = ethers.getDefaultProvider(network, {\n    alchemy: alchemyRopsten\n  });\n  const signer = provider.getSigner;\n}\n\nasync function main() {\n  // A Web3Provider wraps a standard Web3 provider, which is\n  // what Metamask injects as window.ethereum into each page\n  await window.ethereum.enable();\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner(); // For Infura API (Use conditional in future, in case user does not have MetaMask)\n  // (THIS IS FROM EATTHEBLOCKS)\n  // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n  // For Infura API\n  // (FROM ETHERS DOCUMENTATION)\n  // const provider = ethers.getDefaultProvider(/*TESTNET NAME*/, { infura: YOUR_INFURA_PROJECT_ID });\n} // Export instance of Ethers' provider\n\n\nexport default main;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["require","config","path","alchemyRopsten","process","env","ALCHEMY_ROPSTEN","ethers","window","web3","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","network","getDefaultProvider","alchemy","main"],"mappings":"AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,CAAyB;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAzB,E,CACA;;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAnC,C,CACA;AACA;;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAGA;AACA;AACA;;AACA,IAAI,SAAiC,OAAOC,MAAM,CAACC,IAAd,KAAuB,WAA5D,EAAyE;AACrE;AACA;AACA,QAAMD,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,QAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACA,QAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACH,CAND,MAMO;AACH;AACA,QAAMC,OAAO,GAAG,SAAhB;AACA,QAAML,QAAQ,GAAGL,MAAM,CAACW,kBAAP,CAA0BD,OAA1B,EAAmC;AAAEE,IAAAA,OAAO,EAAEhB;AAAX,GAAnC,CAAjB;AACA,QAAMY,MAAM,GAAGH,QAAQ,CAACI,SAAxB;AACH;;AAED,eAAeI,IAAf,GAAsB;AAClB;AACA;AACA,QAAMZ,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,QAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACA,QAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CALkB,CAOlB;AACA;AACA;AAEA;AACA;AACA;AACH,C,CAED;;;AACA,eAAeI,IAAf","sourcesContent":["require(\"dotenv\").config({path: \"./.env\"});\n// Import Alchemy API key from nmeumonic\nconst alchemyRopsten = process.env.ALCHEMY_ROPSTEN;\n// const { ethers } = require(\"hardhat\");\n// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\n\n// Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    await window.ethereum.enable()\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n} else {\n    // We are on the server *OR* the user is not running metamask\n    const network = \"ropsten\";\n    const provider = ethers.getDefaultProvider(network, { alchemy: alchemyRopsten });\n    const signer = provider.getSigner;\n}\n\nasync function main() {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    await window.ethereum.enable()\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    // For Infura API (Use conditional in future, in case user does not have MetaMask)\n    // (THIS IS FROM EATTHEBLOCKS)\n    // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n\n    // For Infura API\n    // (FROM ETHERS DOCUMENTATION)\n    // const provider = ethers.getDefaultProvider(/*TESTNET NAME*/, { infura: YOUR_INFURA_PROJECT_ID });\n}\n\n// Export instance of Ethers' provider\nexport default main;"]},"metadata":{},"sourceType":"module"}