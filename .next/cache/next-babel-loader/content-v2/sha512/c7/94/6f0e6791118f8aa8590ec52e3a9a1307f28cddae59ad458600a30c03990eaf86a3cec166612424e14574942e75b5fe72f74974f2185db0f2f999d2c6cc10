{"ast":null,"code":"import _regeneratorRuntime from \"/Users/robertocantu/blockchain_programming/ApeLend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/robertocantu/blockchain_programming/ApeLend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// May need to use this syntax for frontend:\nimport { ethers } from 'ethers'; // Creating variable instance of\n// provider to give value based\n// if using MetaMask or not.\n\nvar provider;\n\nfunction requestAccounts() {\n  return _requestAccounts.apply(this, arguments);\n} // Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\n\n\nfunction _requestAccounts() {\n  _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return window.ethereum.request({\n              method: \"eth_requestAccounts\"\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _requestAccounts.apply(this, arguments);\n}\n\nif (typeof window.ethereum !== \"undefined\") {\n  window.ethereum.enable(); // A Web3Provider wraps a standard Web3 provider, which is\n  // what Metamask injects as window.ethereum into each page\n\n  var _provider = new ethers.providers.Web3Provider(window.ethereum); // signer = provider.getSigner();\n\n} else {\n  // FIX, RIGHT NOW WE *HAVE* TO USE METAMASK, OTHERWISE ERRORS OUT\n  // We are on the server *OR* the user is not running metamask\n  var network = \"ropsten\"; // const provider = ethers.getDefaultProvider(network, { alchemy: `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` });\n\n  var _provider2 = new ethers.providers.AlchemyProvider(network, \"https://eth-ropsten.alchemyapi.io/v2/\".concat(process.env.ALCHEMY_ROPSTEN)); // signer = provider.getSigner();\n\n} // Export instance of Ethers' provider\n\n\nexport default provider;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","provider","requestAccounts","window","ethereum","request","method","enable","providers","Web3Provider","network","AlchemyProvider","process","env","ALCHEMY_ROPSTEN"],"mappings":";;AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB,C,CAEA;AACA;AACA;;AACA,IAAIC,QAAJ;;SAEeC,e;;EAIf;AACA;AACA;;;;8EANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACUC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAAxB,CADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOA,IAAI,OAAOH,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AACxCD,EAAAA,MAAM,CAACC,QAAP,CAAgBG,MAAhB,GADwC,CAExC;AACA;;AACA,MAAMN,SAAQ,GAAG,IAAID,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACC,QAAzC,CAAjB,CAJwC,CAKxC;;AACH,CAND,MAMO;AACH;AACA;AACA,MAAMM,OAAO,GAAG,SAAhB,CAHG,CAIH;;AACA,MAAMT,UAAQ,GAAG,IAAID,MAAM,CAACQ,SAAP,CAAiBG,eAArB,CAAqCD,OAArC,iDAAsFE,OAAO,CAACC,GAAR,CAAYC,eAAlG,EAAjB,CALG,CAMH;;AACH,C,CAED;;;AACA,eAAeb,QAAf","sourcesContent":["// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\n// Creating variable instance of\n// provider to give value based\n// if using MetaMask or not.\nlet provider;\n\nasync function requestAccounts() {\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\n}\n\n// Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\nif (typeof window.ethereum !== \"undefined\") {\n    window.ethereum.enable();\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // signer = provider.getSigner();\n} else {\n    // FIX, RIGHT NOW WE *HAVE* TO USE METAMASK, OTHERWISE ERRORS OUT\n    // We are on the server *OR* the user is not running metamask\n    const network = \"ropsten\";\n    // const provider = ethers.getDefaultProvider(network, { alchemy: `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` });\n    const provider = new ethers.providers.AlchemyProvider(network, `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` );\n    // signer = provider.getSigner();\n}\n\n// Export instance of Ethers' provider\nexport default provider;"]},"metadata":{},"sourceType":"module"}