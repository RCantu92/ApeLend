{"ast":null,"code":"// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\nlet signer; // Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\n\nif (false && typeof window.web3 !== 'undefined') {\n  // A Web3Provider wraps a standard Web3 provider, which is\n  // what Metamask injects as window.ethereum into each page\n  // await window.ethereum.enable();\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  signer = provider.getSigner();\n} else {\n  // We are on the server *OR* the user is not running metamask\n  const network = \"ropsten\";\n  const provider = ethers.getDefaultProvider(network, {\n    alchemy: process.env.ALCHEMY_ROPSTEN\n  });\n  signer = provider.getSigner();\n} // For Infura API (Use conditional in future, in case user does not have MetaMask)\n// (THIS IS FROM EATTHEBLOCKS)\n// const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n// Export instance of Ethers' provider\n\n\nexport default signer;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","signer","window","web3","provider","providers","Web3Provider","ethereum","getSigner","network","getDefaultProvider","alchemy","process","env","ALCHEMY_ROPSTEN"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB;AAEA,IAAIC,MAAJ,C,CAEA;AACA;AACA;;AACA,IAAI,SAAiC,OAAOC,MAAM,CAACC,IAAd,KAAuB,WAA5D,EAAyE;AACrE;AACA;AACA;AACA,QAAMC,QAAQ,GAAG,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACK,QAAzC,CAAjB;AACAN,EAAAA,MAAM,GAAGG,QAAQ,CAACI,SAAT,EAAT;AACH,CAND,MAMO;AACH;AACA,QAAMC,OAAO,GAAG,SAAhB;AACA,QAAML,QAAQ,GAAGJ,MAAM,CAACU,kBAAP,CAA0BD,OAA1B,EAAmC;AAAEE,IAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAvB,GAAnC,CAAjB;AACAb,EAAAA,MAAM,GAAGG,QAAQ,CAACI,SAAT,EAAT;AACH,C,CAEG;AACA;AACA;AAEJ;;;AACA,eAAeP,MAAf","sourcesContent":["// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\nlet signer;\n\n// Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    // await window.ethereum.enable();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    signer = provider.getSigner();\n} else {\n    // We are on the server *OR* the user is not running metamask\n    const network = \"ropsten\";\n    const provider = ethers.getDefaultProvider(network, { alchemy: process.env.ALCHEMY_ROPSTEN });\n    signer = provider.getSigner();\n}\n\n    // For Infura API (Use conditional in future, in case user does not have MetaMask)\n    // (THIS IS FROM EATTHEBLOCKS)\n    // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n\n// Export instance of Ethers' provider\nexport default signer;"]},"metadata":{},"sourceType":"module"}