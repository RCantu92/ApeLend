{"ast":null,"code":"// May need to use this syntax for frontend:\nimport { ethers } from 'ethers'; // Creating variable instance of\n// provider to give value based\n// if using MetaMask or not.\n\nvar provider; // Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\n\nif (typeof window.ethereum !== 'undefined') {\n  window.ethereum.enable(); // A Web3Provider wraps a standard Web3 provider, which is\n  // what Metamask injects as window.ethereum into each page\n\n  var _provider = new ethers.providers.Web3Provider(window.ethereum); // signer = provider.getSigner();\n\n} else {\n  // FIX, RIGHT NOW WE *HAVE* TO USE METAMASK, OTHERWISE ERRORS OUT\n  // We are on the server *OR* the user is not running metamask\n  var network = \"ropsten\"; // const provider = ethers.getDefaultProvider(network, { alchemy: `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` });\n\n  var _provider2 = new ethers.providers.AlchemyProvider(network, \"https://eth-ropsten.alchemyapi.io/v2/\".concat(process.env.ALCHEMY_ROPSTEN)); // signer = provider.getSigner();\n\n} // For Infura API (Use conditional in future, in case user does not have MetaMask)\n// (THIS IS FROM EATTHEBLOCKS)\n// const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n// Export instance of Ethers' provider\n\n\nexport default provider;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","provider","window","ethereum","enable","providers","Web3Provider","network","AlchemyProvider","process","env","ALCHEMY_ROPSTEN"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB,C,CAEA;AACA;AACA;;AACA,IAAIC,QAAJ,C,CAEA;AACA;AACA;;AACA,IAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AACxCD,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GADwC,CAExC;AACA;;AACA,MAAMH,SAAQ,GAAG,IAAID,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCJ,MAAM,CAACC,QAAzC,CAAjB,CAJwC,CAKxC;;AACH,CAND,MAMO;AACH;AACA;AACA,MAAMI,OAAO,GAAG,SAAhB,CAHG,CAIH;;AACA,MAAMN,UAAQ,GAAG,IAAID,MAAM,CAACK,SAAP,CAAiBG,eAArB,CAAqCD,OAArC,iDAAsFE,OAAO,CAACC,GAAR,CAAYC,eAAlG,EAAjB,CALG,CAMH;;AACH,C,CAEG;AACA;AACA;AAEJ;;;AACA,eAAeV,QAAf","sourcesContent":["// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\n// Creating variable instance of\n// provider to give value based\n// if using MetaMask or not.\nlet provider;\n\n// Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\nif (typeof window.ethereum !== 'undefined') {\n    window.ethereum.enable();\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // signer = provider.getSigner();\n} else {\n    // FIX, RIGHT NOW WE *HAVE* TO USE METAMASK, OTHERWISE ERRORS OUT\n    // We are on the server *OR* the user is not running metamask\n    const network = \"ropsten\";\n    // const provider = ethers.getDefaultProvider(network, { alchemy: `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` });\n    const provider = new ethers.providers.AlchemyProvider(network, `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` );\n    // signer = provider.getSigner();\n}\n\n    // For Infura API (Use conditional in future, in case user does not have MetaMask)\n    // (THIS IS FROM EATTHEBLOCKS)\n    // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n\n// Export instance of Ethers' provider\nexport default provider;"]},"metadata":{},"sourceType":"module"}