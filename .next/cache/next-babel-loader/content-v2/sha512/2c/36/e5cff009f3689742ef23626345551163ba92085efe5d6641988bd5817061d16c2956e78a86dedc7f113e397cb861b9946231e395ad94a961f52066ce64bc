{"ast":null,"code":"// May need to use this syntax for frontend:\nimport { ethers } from 'ethers'; // A Web3Provider wraps a standard Web3 provider, which is\n// what Metamask injects as window.ethereum into each page\n\nvar provider = new ethers.providers.Web3Provider(window.ethereum);\nvar signer = provider.getSigner();\n/*\nlet signer;\n\n// Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    // await window.ethereum.enable();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    signer = provider.getSigner();\n} else {\n    // We are on the server *OR* the user is not running metamask\n    // const network = \"ropsten\";\n    //const provider = ethers.getDefaultProvider(network, { alchemy: process.env.ALCHEMY_ROPSTEN });\n    const provider = new ethers.providers.JsonRpcProvider(`https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}`);\n    signer = provider.getSigner();\n}\n*/\n// For Infura API (Use conditional in future, in case user does not have MetaMask)\n// (THIS IS FROM EATTHEBLOCKS)\n// const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n// Export instance of Ethers' provider\n\nexport default signer;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","provider","providers","Web3Provider","window","ethereum","signer","getSigner"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB,C,CAEA;AACA;;AACA,IAAMC,QAAQ,GAAG,IAAID,MAAM,CAACE,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,IAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;AACA;AACA;AAEJ;;AACA,eAAeD,MAAf","sourcesContent":["// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\n// A Web3Provider wraps a standard Web3 provider, which is\n// what Metamask injects as window.ethereum into each page\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\n\n/*\nlet signer;\n\n// Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    // await window.ethereum.enable();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    signer = provider.getSigner();\n} else {\n    // We are on the server *OR* the user is not running metamask\n    // const network = \"ropsten\";\n    //const provider = ethers.getDefaultProvider(network, { alchemy: process.env.ALCHEMY_ROPSTEN });\n    const provider = new ethers.providers.JsonRpcProvider(`https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}`);\n    signer = provider.getSigner();\n}\n*/\n\n    // For Infura API (Use conditional in future, in case user does not have MetaMask)\n    // (THIS IS FROM EATTHEBLOCKS)\n    // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n\n// Export instance of Ethers' provider\nexport default signer;"]},"metadata":{},"sourceType":"module"}