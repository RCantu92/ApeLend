{"ast":null,"code":"// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\nasync function main() {\n  // Conditional that uses the inject web3 from metamask\n  // under certain conditions. Otherwise, it connects using\n  // Alchemy.\n  if (false && typeof window.web3 !== 'undefined') {\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    await window.ethereum.enable();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n  } else {\n    // We are on the server *OR* the user is not running metamask\n    const network = \"ropsten\";\n    const provider = ethers.getDefaultProvider(network, {\n      alchemy: process.env.ALCHEMY_ROPSTEN\n    });\n    const signer = provider.getSigner;\n  } // For Infura API (Use conditional in future, in case user does not have MetaMask)\n  // (THIS IS FROM EATTHEBLOCKS)\n  // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n\n} // Export instance of Ethers' provider\n\n\nexport default main;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","main","window","web3","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","network","getDefaultProvider","alchemy","process","env","ALCHEMY_ROPSTEN"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB;;AAEA,eAAeC,IAAf,GAAsB;AAClB;AACA;AACA;AACA,MAAI,SAAiC,OAAOC,MAAM,CAACC,IAAd,KAAuB,WAA5D,EAAyE;AACrE;AACA;AACA,UAAMD,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN;AACA,UAAMC,QAAQ,GAAG,IAAIN,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB;AACA,UAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACH,GAND,MAMO;AACH;AACA,UAAMC,OAAO,GAAG,SAAhB;AACA,UAAML,QAAQ,GAAGN,MAAM,CAACY,kBAAP,CAA0BD,OAA1B,EAAmC;AAAEE,MAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAAvB,KAAnC,CAAjB;AACA,UAAMP,MAAM,GAAGH,QAAQ,CAACI,SAAxB;AACH,GAfiB,CAiBlB;AACA;AACA;;AACH,C,CAED;;;AACA,eAAeT,IAAf","sourcesContent":["// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\nasync function main() {\n    // Conditional that uses the inject web3 from metamask\n    // under certain conditions. Otherwise, it connects using\n    // Alchemy.\n    if (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n        // A Web3Provider wraps a standard Web3 provider, which is\n        // what Metamask injects as window.ethereum into each page\n        await window.ethereum.enable()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n    } else {\n        // We are on the server *OR* the user is not running metamask\n        const network = \"ropsten\";\n        const provider = ethers.getDefaultProvider(network, { alchemy: process.env.ALCHEMY_ROPSTEN });\n        const signer = provider.getSigner;\n    }\n\n    // For Infura API (Use conditional in future, in case user does not have MetaMask)\n    // (THIS IS FROM EATTHEBLOCKS)\n    // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n}\n\n// Export instance of Ethers' provider\nexport default main;"]},"metadata":{},"sourceType":"module"}