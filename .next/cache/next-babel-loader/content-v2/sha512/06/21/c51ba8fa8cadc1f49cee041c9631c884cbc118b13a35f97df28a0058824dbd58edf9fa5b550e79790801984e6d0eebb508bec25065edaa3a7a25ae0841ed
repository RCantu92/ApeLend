{"ast":null,"code":"// May need to use this syntax for frontend:\nimport { ethers } from 'ethers'; // Creating variable instance of\n// provider to give value based\n// if using MetaMask or not.\n\nvar provider;\nvar signer; // Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\n\nif (true && typeof window.ethereum !== 'undefined') {\n  window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  }); // A Web3Provider wraps a standard Web3 provider, which is\n  // what Metamask injects as window.ethereum into each page\n\n  var _provider = new ethers.providers.Web3Provider(window.ethereum);\n\n  signer = await _provider.getSigner();\n} else {\n  // FIX, RIGHT NOW WE *HAVE* TO USE METAMASK, OTHERWISE ERRORS OUT\n  // We are on the server *OR* the user is not running metamask\n  var network = \"ropsten\";\n\n  var _provider2 = ethers.getDefaultProvider(network, {\n    alchemy: \"https://eth-ropsten.alchemyapi.io/v2/\".concat(process.env.ALCHEMY_ROPSTEN)\n  }); // const provider = new ethers.providers.AlchemyProvider(network, `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` );\n  // signer = provider.getSigner();\n\n} // Export instance of Ethers' provider\n\n\nexport { provider, signer };","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","provider","signer","window","ethereum","request","method","providers","Web3Provider","getSigner","network","getDefaultProvider","alchemy","process","env","ALCHEMY_ROPSTEN"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB,C,CAEA;AACA;AACA;;AACA,IAAIC,QAAJ;AACA,IAAIC,MAAJ,C,CAEA;AACA;AACA;;AACA,IAAI,QAAiC,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAAhE,EAA6E;AACzED,EAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAxB,EADyE,CAEzE;AACA;;AACA,MAAML,SAAQ,GAAG,IAAID,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCL,MAAM,CAACC,QAAzC,CAAjB;;AACAF,EAAAA,MAAM,GAAG,MAAMD,SAAQ,CAACQ,SAAT,EAAf;AACH,CAND,MAMO;AACH;AACA;AACA,MAAMC,OAAO,GAAG,SAAhB;;AACA,MAAMT,UAAQ,GAAGD,MAAM,CAACW,kBAAP,CAA0BD,OAA1B,EAAmC;AAAEE,IAAAA,OAAO,iDAA0CC,OAAO,CAACC,GAAR,CAAYC,eAAtD;AAAT,GAAnC,CAAjB,CAJG,CAKH;AACA;;AACH,C,CAED;;;AACA,SAASd,QAAT,EAAmBC,MAAnB","sourcesContent":["// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\n// Creating variable instance of\n// provider to give value based\n// if using MetaMask or not.\nlet provider;\nlet signer;\n\n// Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\nif (typeof window !== 'undefined' && typeof window.ethereum !== 'undefined') {\n    window.ethereum.request({ method: \"eth_requestAccounts\" });\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    signer = await provider.getSigner();\n} else {\n    // FIX, RIGHT NOW WE *HAVE* TO USE METAMASK, OTHERWISE ERRORS OUT\n    // We are on the server *OR* the user is not running metamask\n    const network = \"ropsten\";\n    const provider = ethers.getDefaultProvider(network, { alchemy: `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` });\n    // const provider = new ethers.providers.AlchemyProvider(network, `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` );\n    // signer = provider.getSigner();\n}\n\n// Export instance of Ethers' provider\nexport { provider, signer } ;"]},"metadata":{},"sourceType":"module"}