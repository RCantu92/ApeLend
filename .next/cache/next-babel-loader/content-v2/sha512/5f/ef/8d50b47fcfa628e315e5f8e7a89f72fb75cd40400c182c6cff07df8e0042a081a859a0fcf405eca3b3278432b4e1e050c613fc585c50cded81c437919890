{"ast":null,"code":"import { ethers } from \"ethers\"; // May need to use this syntax for frontend:\n// import { ethers } from 'ethers';\n// IMPORT INFURA API KEY FROM NMEUMONIC\n\nasync function main() {\n  // A Web3Provider wraps a standard Web3 provider, which is\n  // what Metamask injects as window.ethereum into each page\n  let provider;\n  window.ethereum.enable().then(provider = new ethers.providers.Web3Provider(window.ethereum));\n  const signer = provider.getSigner(); // For Infura API (Use conditional in future, in case user does not have MetaMask)\n  // (THIS IS FROM EATTHEBLOCKS)\n  // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n  // For Infura API\n  // (FROM ETHERS DOCUMENTATION)\n  // const provider = ethers.getDefaultProvider(/*TESTNET NAME*/, { infura: YOUR_INFURA_PROJECT_ID });\n} // Export instance of Ethers' provider\n\n\nexport default main;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","main","provider","window","ethereum","enable","then","providers","Web3Provider","signer","getSigner"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB,C,CACA;AACA;AACA;;AAEA,eAAeC,IAAf,GAAsB;AACtB;AACA;AACI,MAAIC,QAAJ;AACAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GACKC,IADL,CACUJ,QAAQ,GAAG,IAAIF,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCL,MAAM,CAACC,QAAzC,CADrB;AAEA,QAAMK,MAAM,GAAGP,QAAQ,CAACQ,SAAT,EAAf,CANkB,CAQlB;AACA;AACA;AAEA;AACA;AACA;AACH,C,CAED;;;AACA,eAAeT,IAAf","sourcesContent":["import { ethers } from \"ethers\";\n// May need to use this syntax for frontend:\n// import { ethers } from 'ethers';\n// IMPORT INFURA API KEY FROM NMEUMONIC\n\nasync function main() {\n// A Web3Provider wraps a standard Web3 provider, which is\n// what Metamask injects as window.ethereum into each page\n    let provider;\n    window.ethereum.enable()\n        .then(provider = new ethers.providers.Web3Provider(window.ethereum));\n    const signer = provider.getSigner();\n\n    // For Infura API (Use conditional in future, in case user does not have MetaMask)\n    // (THIS IS FROM EATTHEBLOCKS)\n    // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n\n    // For Infura API\n    // (FROM ETHERS DOCUMENTATION)\n    // const provider = ethers.getDefaultProvider(/*TESTNET NAME*/, { infura: YOUR_INFURA_PROJECT_ID });\n}\n\n// Export instance of Ethers' provider\nexport default main;"]},"metadata":{},"sourceType":"module"}