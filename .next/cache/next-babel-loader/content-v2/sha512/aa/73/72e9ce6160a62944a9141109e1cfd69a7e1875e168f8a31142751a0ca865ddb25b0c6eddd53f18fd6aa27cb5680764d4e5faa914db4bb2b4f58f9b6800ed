{"ast":null,"code":"// May need to use this syntax for frontend:\nimport { ethers } from 'ethers'; // Creating variable instance of\n// provider to give value based\n// if using MetaMask or not.\n\nlet provider; // Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\n\nif (false && typeof window.web3 !== 'undefined') {\n  window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  }); // A Web3Provider wraps a standard Web3 provider, which is\n  // what Metamask injects as window.ethereum into each page\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum); // signer = provider.getSigner();\n} else {\n  // FIX, RIGHT NOW WE *HAVE* TO USE METAMASK, OTHERWISE ERRORS OUT\n  // We are on the server *OR* the user is not running metamask\n  const network = \"ropsten\";\n  const provider = ethers.getDefaultProvider(network, {\n    alchemy: `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}`\n  }); // const provider = new ethers.providers.AlchemyProvider(network, `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` );\n  // signer = provider.getSigner();\n} // Export instance of Ethers' provider\n\n\nexport default provider;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","provider","window","web3","ethereum","request","method","providers","Web3Provider","network","getDefaultProvider","alchemy","process","env","ALCHEMY_ROPSTEN"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB,C,CAEA;AACA;AACA;;AACA,IAAIC,QAAJ,C,CAEA;AACA;AACA;;AACA,IAAI,SAAiC,OAAOC,MAAM,CAACC,IAAd,KAAuB,WAA5D,EAAyE;AACrED,EAAAA,MAAM,CAACE,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAxB,EADqE,CAErE;AACA;;AACA,QAAML,QAAQ,GAAG,IAAID,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CAAjB,CAJqE,CAKrE;AACH,CAND,MAMO;AACH;AACA;AACA,QAAMK,OAAO,GAAG,SAAhB;AACA,QAAMR,QAAQ,GAAGD,MAAM,CAACU,kBAAP,CAA0BD,OAA1B,EAAmC;AAAEE,IAAAA,OAAO,EAAG,wCAAuCC,OAAO,CAACC,GAAR,CAAYC,eAAgB;AAA/E,GAAnC,CAAjB,CAJG,CAKH;AACA;AACH,C,CAED;;;AACA,eAAeb,QAAf","sourcesContent":["// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\n// Creating variable instance of\n// provider to give value based\n// if using MetaMask or not.\nlet provider;\n\n// Conditional that uses the inject web3 from metamask\n// under certain conditions. Otherwise, it connects using\n// Alchemy.\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n    window.ethereum.request({ method: \"eth_requestAccounts\" });\n    // A Web3Provider wraps a standard Web3 provider, which is\n    // what Metamask injects as window.ethereum into each page\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    // signer = provider.getSigner();\n} else {\n    // FIX, RIGHT NOW WE *HAVE* TO USE METAMASK, OTHERWISE ERRORS OUT\n    // We are on the server *OR* the user is not running metamask\n    const network = \"ropsten\";\n    const provider = ethers.getDefaultProvider(network, { alchemy: `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` });\n    // const provider = new ethers.providers.AlchemyProvider(network, `https://eth-ropsten.alchemyapi.io/v2/${process.env.ALCHEMY_ROPSTEN}` );\n    // signer = provider.getSigner();\n}\n\n// Export instance of Ethers' provider\nexport default provider;"]},"metadata":{},"sourceType":"module"}