{"ast":null,"code":"const {\n  ethers\n} = require(\"ethers\"); // May need to use this syntax for frontend:\n// import { ethers } from 'ethers';\n// IMPORT INFURA API KEY FROM NMEUMONIC\n// A Web3Provider wraps a standard Web3 provider, which is\n// what Metamask injects as window.ethereum into each page\n\n\nconst provider = new ethers.providers.Web3Provider(window.ethereum); // For Infura API (Use conditional in future, in case user does not have MetaMask)\n// (THIS IS FROM EATTHEBLOCKS)\n// const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n// For Infura API\n// (FROM ETHERS DOCUMENTATION)\n// const provider = ethers.getDefaultProvider(/*TESTNET NAME*/, { infura: YOUR_INFURA_PROJECT_ID });\n// Export instance of Ethers' provider\n\nexport default provider;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["ethers","require","provider","providers","Web3Provider","window","ethereum"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B,C,CACA;AACA;AACA;AAEA;AACA;;;AACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,eAAeJ,QAAf","sourcesContent":["const { ethers } = require(\"ethers\");\n// May need to use this syntax for frontend:\n// import { ethers } from 'ethers';\n// IMPORT INFURA API KEY FROM NMEUMONIC\n\n// A Web3Provider wraps a standard Web3 provider, which is\n// what Metamask injects as window.ethereum into each page\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\n// For Infura API (Use conditional in future, in case user does not have MetaMask)\n// (THIS IS FROM EATTHEBLOCKS)\n// const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n\n// For Infura API\n// (FROM ETHERS DOCUMENTATION)\n// const provider = ethers.getDefaultProvider(/*TESTNET NAME*/, { infura: YOUR_INFURA_PROJECT_ID });\n\n// Export instance of Ethers' provider\nexport default provider;"]},"metadata":{},"sourceType":"module"}