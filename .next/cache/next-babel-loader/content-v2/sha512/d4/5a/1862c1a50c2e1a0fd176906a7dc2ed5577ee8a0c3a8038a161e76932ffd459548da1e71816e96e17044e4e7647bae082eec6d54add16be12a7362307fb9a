{"ast":null,"code":"import _regeneratorRuntime from \"/Users/robertocantu/blockchain_programming/ApeLend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/robertocantu/blockchain_programming/ApeLend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nrequire(\"dotenv\").config({\n  path: \"./.env\"\n}); // Import Alchemy API key from nmeumonic\n\n\nvar alchemyRopsten = process.env.ALCHEMY_ROPSTEN; // const { ethers } = require(\"hardhat\");\n// May need to use this syntax for frontend:\n\nimport { ethers } from 'ethers';\n\nfunction main() {\n  return _main.apply(this, arguments);\n} // Export instance of Ethers' provider\n\n\nfunction _main() {\n  _main = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, signer, network, _provider, _signer;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(true && typeof window.web3 !== 'undefined')) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 3;\n            return window.ethereum.enable();\n\n          case 3:\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            signer = provider.getSigner();\n            _context.next = 10;\n            break;\n\n          case 7:\n            // We are on the server *OR* the user is not running metamask\n            network = \"ropsten\";\n            _provider = ethers.getDefaultProvider(network, {\n              alchemy: alchemyRopsten\n            });\n            _signer = _provider.getSigner;\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _main.apply(this, arguments);\n}\n\nexport default main;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/ApeLend/ethers/ethers.js"],"names":["require","config","path","alchemyRopsten","process","env","ALCHEMY_ROPSTEN","ethers","main","window","web3","ethereum","enable","provider","providers","Web3Provider","signer","getSigner","network","getDefaultProvider","alchemy"],"mappings":";;;AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,CAAyB;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAzB,E,CACA;;;AACA,IAAMC,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYC,eAAnC,C,CACA;AACA;;AACA,SAASC,MAAT,QAAuB,QAAvB;;SAEeC,I;;EAsBf;;;;mEAtBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIQ,QAAiC,OAAOC,MAAM,CAACC,IAAd,KAAuB,WAJhE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOcD,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAPd;;AAAA;AAQcC,YAAAA,QARd,GAQyB,IAAIN,MAAM,CAACO,SAAP,CAAiBC,YAArB,CAAkCN,MAAM,CAACE,QAAzC,CARzB;AAScK,YAAAA,MATd,GASuBH,QAAQ,CAACI,SAAT,EATvB;AAAA;AAAA;;AAAA;AAWQ;AACMC,YAAAA,OAZd,GAYwB,SAZxB;AAacL,YAAAA,SAbd,GAayBN,MAAM,CAACY,kBAAP,CAA0BD,OAA1B,EAAmC;AAAEE,cAAAA,OAAO,EAAEjB;AAAX,aAAnC,CAbzB;AAcca,YAAAA,OAdd,GAcuBH,SAAQ,CAACI,SAdhC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBA,eAAeT,IAAf","sourcesContent":["require(\"dotenv\").config({path: \"./.env\"});\n// Import Alchemy API key from nmeumonic\nconst alchemyRopsten = process.env.ALCHEMY_ROPSTEN;\n// const { ethers } = require(\"hardhat\");\n// May need to use this syntax for frontend:\nimport { ethers } from 'ethers';\n\nasync function main() {\n    // Conditional that uses the inject web3 from metamask\n    // under certain conditions. Otherwise, it connects using\n    // Alchemy.\n    if (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n        // A Web3Provider wraps a standard Web3 provider, which is\n        // what Metamask injects as window.ethereum into each page\n        await window.ethereum.enable()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n    } else {\n        // We are on the server *OR* the user is not running metamask\n        const network = \"ropsten\";\n        const provider = ethers.getDefaultProvider(network, { alchemy: alchemyRopsten });\n        const signer = provider.getSigner;\n}\n\n    // For Infura API (Use conditional in future, in case user does not have MetaMask)\n    // (THIS IS FROM EATTHEBLOCKS)\n    // const provider = new ethers.providers.AlchemyProvider('testnet name', INFURA_TESTNET_API_KEY);\n}\n\n// Export instance of Ethers' provider\nexport default main;"]},"metadata":{},"sourceType":"module"}